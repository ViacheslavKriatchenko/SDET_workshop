name: Run API Tests

on:
  push:
    branches: [main, api-develop]  # Запускать workflow при пуше в main
  workflow_dispatch:
    inputs:
      test_marker:
        description: 'Маркировка (например: api)'
        required: true
        default: 'api'

jobs:
  run_tests:
    runs-on: ubuntu-latest  # Используем последнюю версию Ubuntu

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Clone service repository
        run: |
          git clone https://github.com/bondarenkokate73/simbirsoft_sdet_project.git service

      - name: Set up Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose

      - name: Build and run Docker container
        working-directory: ./service  # Переход в папку сервиса # или curl — смотри ниже
        run: |
          docker-compose up --build -d
          echo "Waiting for service to start..."
          sleep 10

      - name: Wait for service to be ready
        run: |
            echo "Waiting for http://localhost:8080..."
            timeout 60 bash -c 'until curl -s http://localhost:8080/api/_/docs/swagger/index.html; do sleep 2; done' || exit 1
        

      - name: Set up Python  # Установка Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"  # Используем Python версии 3.12

      - name: Install dependencies  # Установка зависимостей проекта
        run: |  # Устанавливаем зависимости, указанные в requirements.txt 
          pip install -r requirements.txt

      - name: Run API tests with pytest and generate Allure results  # Запуск тестов
        run: | # Запускаем тесты с меткой "api" # --alluredir=allure-results сохраняет результаты в папку allure-results # --numprocesses 2 - выполняем тесты в 2 потока (ускоряет выполнение)
          pytest tests/api --alluredir=allure-results --numprocesses 2
          
      - name: Upload Allure results  # Загружаем результаты тестов в GitHub Actions незавиимо от успеха always()
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: allure-results  # Название артефакта
          path: allure-results  # Путь к файлам отчета

      - name: Stop and remove service containers
        if: always()
        working-directory: ./service
        run: |
          docker-compose down
          
  publish-report:  # Джоба для публикации Allure-отчета на GitHub Pages
      needs: [ run_tests ]  # Выполняется только после успешного выполнения run-tests
      runs-on: ubuntu-latest  # Используем последнюю версию Ubuntu

      steps:
        - name: Check out repository  # Клонируем репозиторий, включая ветку gh-pages
          uses: actions/checkout@v4
          with:
            ref: gh-pages  # Операции будем выполнять в ветке gh-pages
            path: gh-pages  # Клонируем файлы в папку gh-pages

        - name: Download Allure results  # Загружаем ранее сохраненные результаты тестов
          uses: actions/download-artifact@v4
          with:
            name: allure-results  # Название артефакта
            path: allure-results  # Путь для скачивания

        - name: Allure Report action from marketplace  # Генерация отчета Allure
          uses: simple-elf/allure-report-action@v1.12
          if: always()
          with:
            allure_results: allure-results  # Папка с результатами тестов
            allure_history: allure-history  # Папка для хранения истории отчетов

        - name: Deploy report to Github Pages  # Публикация отчета на GitHub Pages
          if: always()
          uses: peaceiris/actions-gh-pages@v4
          with:
            github_token: ${{ secrets.GITHUB_TOKEN }}  # Токен для доступа к репозиторию
            publish_branch: gh-pages  # Публикуем отчет в ветку gh-pages
            publish_dir: allure-history  # Папка, где находится сгенерированный отчет